demo()
# ggplot2
# import tidyverse
library(tidyverse)
# plot the first ggplot
### geom_point() means scatter plot
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) + geom_point()
+ geom_point()
# plot the another layer of above chart with the smooth curve
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point()
# plot the another layer of above chart with the smooth curve
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth()
## plot the another layer of above chart with rug plot (distribution of y values)
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth() +
geom_rug()
## we could brief the methods as follows
ggplot(mtcars,aes(x=hp,y=mpg)) +
geom_point()
## plot the another layer of above chart with rug plot (distribution of x and y values)
ggplot(data = mtcars, mapping = aes(x = hp, y = mpg)) +
geom_point() +
geom_smooth() +
geom_rug()
# customize the size
ggplot(mtcars,aes(x=hp,y=mpg)) +
geom_point(size=4)
# customize the size
ggplot(mtcars,aes(x=hp,y=mpg)) +
geom_point(size=3,col='navy')
# customize the size
ggplot(mtcars,aes(x=hp,y=mpg)) +
geom_point(size=3,col='darkgreen',alpha=0.7)
# customize the size
ggplot(mtcars,aes(x=hp,y=mpg)) +
geom_point(size=3,col='darkslategrey',alpha=0.7)
# plot the histogram
ggplot(mtcars,aes(hp)) +
geom_histogram()
# plot the histogram
### by default, bins is 30 which we could customize it
ggplot(mtcars,aes(hp)) +
geom_histogram(bins = 20)
# plot the histogram
### by default, bins is 30 which we could customize it
ggplot(mtcars,aes(hp)) +
geom_histogram(bins = 10)
# plot the histogram
### by default, bins is 30 which we could customize it
ggplot(mtcars,aes(hp)) +
geom_histogram(bins = 16,fill = 'darkred',alpla=0.5)
# build the box plot
ggplot(mtcars,aes(hp)) +
geom_boxplot()
p + geom_histogram(bins=10)
# we could save the plot setting as variables so we could use it as references.
p <- ggplot(mtcars,aes(hp))
p + geom_histogram(bins=10)
p + geo_boxplot()
p + geom_density()
p + geo_boxplot()
p + geom_boxplot()
p + geom_density()
View(diamonds)
class(diamonds)
diamonds
library(dplyr)
library(deplyr)
library(dplyr)
# try to build the box plot with multiple varuables, we will try it with the new datasets
diamond %>%
count(count)
# try to build the box plot with multiple varuables, we will try it with the new datasets
diamonds %>%
count(count)
library(dplyr)
# try to build the box plot with multiple varuables, we will try it with the new datasets
diamonds %>%
count(count)
detach("package:dplyr", unload = TRUE)
library(dplyr)
# try to build the box plot with multiple varuables, we will try it with the new datasets
diamonds %>%
count(count)
# try to build the box plot with multiple varuables, we will try it with the new datasets
diamonds %>%
count(cut)
## plot the bar chart
ggplot(diamonds,aes(cut)) +
geom_bar
## plot the bar chart
ggplot(diamonds,aes(cut)) +
geom_bar()
## plot the bar chart
ggplot(diamonds,aes(cut)) +
geom_bar(fill = 'darkslategrey')
## plot the bar chart
ggplot(diamonds,aes(cut)) +
geom_bar(fill = 'firebrick')
## plot the bar chart
ggplot(diamonds,aes(cut)) +
geom_bar(fill = 'red4')
## see the grouping of each color
diamonds %>%
count(color)
# map the diamonds$color to diamonds$cut
ggplot(diamonds,mapping = aes(cut,fill=color)) +
geom_bar()
# map the diamonds$color to diamonds$cut
ggplot(diamonds,mapping = aes(cut,fill=color)) +
geom_bar(position='stack')
# map the diamonds$color to diamonds$cut
ggplot(diamonds,mapping = aes(cut,fill=color)) +
geom_bar(position='dodge')
# customize the position, make it shows the proportion
ggplot(diamonds,mapping = aes(cut,fill=color)) +
geom_bar(position='fill')
# find the relationship between carat and price, we will use scatter plot for this study
ggplot(diamonds, aes(carat,price)) +
geom_point()
### plotting with this datasets will take the time due to data size so we will try to sampling it
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
### plotting with this dataset will take the time due to data size so we will try to sampling it
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
### plotting with this dataset will take the time due to data size so we will try to sampling it
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
### plotting with this dataset will take the time due to data size so we will try to sampling it
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
### plotting with this dataset will take the time due to data size so we will try to sampling it
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
small_diamonds <- sample_n(diamonds, 5000)
ggplot(small_diamonds, aes(carat,price)) +
geom_point()
# try facet: small multiple charts
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
facet_wrap(~color)
# try facet: small multiple charts
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
facet_wrap(~color, ncol=4)
# try facet: small multiple charts
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
facet_wrap(~color, ncol=2)
# try facet: small multiple charts
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
facet_wrap(~color, ncol=2, fill = 'red')
# try facet: small multiple charts
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth() +
facet_wrap(~color, ncol=2)
# try facet: small multiple charts
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~color, ncol=2)
# try facet: small multiple charts, with linear equation
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2)
# try facet: small multiple scatter charts, with linear equation
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2) +
theme_dark()
# try facet: small multiple scatter charts, with linear equation
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2) +
theme_minimal()
# try facet: small multiple scatter charts, with linear equation, minimal themes(background), labels
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2) +
theme_minimal() +
labs(title='carat and price scatter chart by color',
x = 'carat',
y = 'price(USD)',
caption = 'source = sampling dataset')
# try facet: small multiple scatter charts, with linear equation, minimal themes(background), labels
ggplot(small_diamonds, aes(carat,price)) +
geom_point() +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2) +
theme_minimal() +
labs(title='carat and price scatter chart by color',
x = 'carat',
y = 'price(USD)',
caption = 'source: sampling dataset')
# map the color with facet
ggplot(small_diamonds, aes(carat,price, col=cut)) +
geom_point() +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2) +
theme_minimal() +
labs(title='carat and price scatter chart by color',
x = 'carat',
y = 'price(USD)',
caption = 'source: sampling dataset')
# map the color with facet
ggplot(small_diamonds, aes(carat,price, col=cut)) +
geom_point(size = 2, alpla = 0.3) +
geom_smooth(method = 'lm', col='red4') +
facet_wrap(~color, ncol=2) +
theme_minimal() +
labs(title='carat and price scatter chart by color',
x = 'carat',
y = 'price(USD)',
caption = 'source: sampling dataset')
setwd("c:/users/abejr/rstudio")
getwd()
## try new model of resampling from bootstrap 25 iterations to LOOCV
data("BostonHousing") # load the datasets
View(BostonHousing) # we will forecast 'medv'
## rename the datasets since it's too long
df <- BostonHousing
library(tidyverse)
library(mlbench)
library(caret)
## try new model of resampling from bootstrap 25 iterations to LOOCV
data("BostonHousing") # load the datasets
View(BostonHousing) # we will forecast 'medv'
## rename the datasets since it's too long
df <- BostonHousing
## check if data is complete
mean(complete.cases(df)) # 1 means there's no null values
# 1. trian test split
split_data <- function(df,train_size=0.8) {
set.seed(66)
n <- nrow(df)
id <- sample(1:n, size=n*train_size)
train_df <- df[id,]
test_df <- df[-id,]
return(list(train=train_df, test=test_df))
}
prep_data <- split_data(df)
train_data <- prep_data[[1]]
test_data <- prep_data[[2]]
# 2. train model
## build the train control
ctrl <- trainControl(
# change resampling technique from bootstrap 25 to 50
method = "CV",
number = 10,
verboseIter = TRUE # will print the log into console.
)
model <- train(medv  ~ rm + b + crim,
data = train_data,
method = "lm",
trControl = ctrl)
## variable importance
varImp(model)
## see the results
model
# ### results description
# we made the train on 404 samples
# based on 3 independent vaiables (predictor)
# the model resampling using bootstrapped by 25 iterations(reps) as a default settings
# RMSE, Rsquared, and MAE shown as mean across 25 iterations
#   RMSE      Rsquared   MAE
#   6.452399  0.5378308  4.255888
model$finalModel
#this will show coefficients to each variables, and intercept
# 3. score/predict new data
p <- predict(model,newdata=test_data)
p
# 4. evaluate model
cal_mae <- function(actual,pred) {
error <- actual - pred
return(mean(abs(error)))
}
cal_mse <- function(actual,pred) {
error <- actual - pred
return(mean(error**2))
}
cal_rmse <- function(actual,pred) {
error <- actual - pred
return(sqrt(mean(error**2)))
}
cal_mae(test_data$medv,p)
cal_mse(test_data$medv,p)
cal_rmse(test_data$medv,p)
# > cal_mae(test_data$medv,p)
# [1] 3.57368
# > cal_mse(test_data$medv,p)
# [1] 24.01905
# > cal_rmse(test_data$medv,p)
# [1] 4.900923 ## a bit lower than trained model, which is good
## tuneLength vs tuneGrid
ctrl <- trainControl(
method = "cv", #k-fold cv
number = 5,
verboseIter = TRUE
)
model <- train(medv ~ rm + b + crim + lstat age,
## tuneLength vs tuneGrid
ctrl <- trainControl(
method = "cv", #k-fold cv
number = 5,
verboseIter = TRUE
)
model <- train(medv ~ rm + b + crim + lstat + age,
data = train_data,
method = "knn",
# tuneLength = 5,
tuneGrid = data.frame(k=c(5,7,13)), # we could use either length and gric
preprocess = c("center","scale"),
trControl = ctrl)
## tuneLength vs tuneGrid
ctrl <- trainControl(
method = "cv", #k-fold cv
number = 5,
verboseIter = TRUE
)
model <- train(medv ~ rm + b + crim + lstat + age,
data = train_data,
method = "knn",
metric = "RMSE",
# tuneLength = 5,
tuneGrid = data.frame(k=c(5,7,13)), # we could use either length and gric
preprocess = c("center","scale"),
trControl = ctrl)
model
## tuneLength vs tuneGrid
ctrl <- trainControl(
method = "repeatedcv", #k-fold cv
number = 5,
repeats = 5,
verboseIter = TRUE
)
model <- train(medv ~ rm + b + crim + lstat + age,
data = train_data,
method = "knn",
metric = "RMSE", # we could set the metric use to help the code use the optimal k
# tuneLength = 5,
tuneGrid = data.frame(k=c(5,7,13)), # we could use either length and gric
preprocess = c("center","scale"),
trControl = ctrl)
model
